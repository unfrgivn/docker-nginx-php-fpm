server {
	listen   80; ## listen for ipv4; this line is default and implied
	listen   [::]:80 default ipv6only=on; ## listen for ipv6

  # Make site accessible from http://localhost/
  # server_name _;

	root /var/www/html;
	index index.php index.html index.htm;

	# Allow passing in extra directives for the site
	# Must be set first so they can take precedence over defaults
	include /etc/nginx/extras-enabled/*.conf;

  ## See the blacklist.conf file at the parent dir: /etc/nginx.
  ## Deny access based on the User-Agent header.
  #if ($bad_bot) {
  #    return 444;
  #}
  ## Deny access based on the Referer header.
  #if ($bad_referer) {
  #    return 444;
  #}

  ## Cache control. Useful for WP super cache.
  add_header Cache-Control "store, must-revalidate, post-check=0, pre-check=0";

  ## If no favicon exists return a 204 (no content error).
  location = /favicon.ico {
      try_files $uri =204;
      log_not_found off;
      access_log off;
  }

  ## Don't log robots.txt requests.
  location = /robots.txt {
      allow all;
      log_not_found off;
      access_log off;
  }

	## Health check endpoint
	location /healthz {
      access_log off;
			add_header Content-Type text/plain;
      return 200 "OK\n";
  }

	# Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html
	sendfile off;

	# Add stdout logging
	error_log /dev/stdout info;
	access_log /dev/stdout;

  # Add option for x-forward-for (real ip when behind elb)
  #real_ip_header X-Forwarded-For;
  #set_real_ip_from 172.16.0.0/12;

	location / {
	 try_files $uri $uri/ /index.php?$args;
	}

	# pass the PHP scripts to FastCGI server listening on socket
	#
	location ~ \.php$ {
    # try_files $uri =404;
		try_files $uri /index.php?req=$uri&$args;

		#NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
    fastcgi_split_path_info ^(.+\.php)(/.+)$;

    include /etc/nginx/fastcgi_params;

		# This sends all PHP erros to nginx, without it any response is logged as a 200
		fastcgi_intercept_errors on;

    fastcgi_pass unix:/var/run/php-fpm.sock;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param SCRIPT_NAME $fastcgi_script_name;
    fastcgi_index index.php;
	}

  ## All files/directories that are protected and unaccessible from the web.
  location ~* ^.*(\.(?:git|svn|htaccess|pot?))$ {
      return 404;
  }

	## Protect readmes to not reveal sensitive information
  location ~* ^.*(readme)\.(html|txt|md)$ {
      return 404;
  }

  ## Static files are served directly.
  location ~* \.(?:css|gif|htc|ico|js|jpe?g|png|swf)$ {
			# Send missing file requests to index page so they can be handled by a dynamic 404
			try_files $uri /index.php?req=$uri&$args;
      expires max;
  #    access_log off;
      log_not_found off;
      add_header Access-Control-Allow-Origin *;
      ## No need to bleed constant updates. Send the all shebang in one
      ## fell swoop.
      tcp_nodelay off;
      ## Set the OS file cache.
      open_file_cache max=1000 inactive=120s;
      open_file_cache_valid 45s;
      open_file_cache_min_uses 2;
      open_file_cache_errors off;
  }

  ## Pseudo streaming of H264/AAC files. This requires an Nginx
  ## version greater or equal to 1.0.7 for the stable branch and
  ## greater or equal to 1.1.3 for the development branch.
  ## Cf. http://nginx.org/en/docs/http/ngx_http_mp4_module.html.
  location ~* .*\.(?:m4a|mp4|mov)$ {
      mp4;
      mp4_buffer_size     1M;
      mp4_max_buffer_size 5M;
  }

  ## Keep a tab on the 'big' static files.
  location ~* ^.+\.(?:ogg|pdf|pptx?)$ {
      expires 30d;
      ## No need to bleed constant updates. Send the all shebang in one
      ## fell swoop.
      tcp_nodelay off;
  }

  ## Cache static files
  location ~* \.(jpg|jpeg|gif|png|css|js|ico|webp|tiff|ttf|svg)$ {
    expires           5d;
  }

	# deny access to . files, for security
	location ~ /\. {
  	log_not_found off;
  	deny all;
	}

	location ^~ /.well-known {
    allow all;
    auth_basic off;
  }

	## The 'final' attempt to serve the request.
  location @nocache {
      try_files $uri $uri/ /index.php?req=$uri&$args;
  }

  # This should match upload_max_filesize in php.ini
	client_max_body_size 100M;
  client_body_buffer_size 100M;
}
